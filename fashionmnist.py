# -*- coding: utf-8 -*-
"""fashionmnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e-oE-DQVRED5-8T5QbJ1ufjEQBK1HZL5
"""

import torch
import torch.nn as nn # ALL neural network modules, nn.Linear, nn.Conv2d, Batch
import torch.optim as optim # For all Optimization algorithms, SGD, Adam, etc.
import torch.nn.functional as F # ALL functions that don't have any parameters
from torch.utils.data import DataLoader # Gives easier dataset managment and cri
import torchvision.datasets as datasets # Has standard datasets we can import
import torchvision.transforms as transforms # Transformations we can perform on
import matplotlib.pyplot as plt
import torchvision
class my_model(nn.Module):
    def __init__(self):
        super(my_model, self).__init__()
        self.fc2 = nn.Linear(128, 10)
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(32, 64, 3, 1)
        self.fc1 = nn.Linear(10816, 128)

    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)
        x = self.conv2(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = torch.flatten(x, 1)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.fc2(x)
        output = F.log_softmax(x, dim=1)
        return output
    
mod = my_model()

input_size = 784 # 28x28 = 784, size of MNIST images (grayscale)
num_classes = 10
batch_size = 64
train_dataset = datasets.FashionMNIST( 
    root="dataset/",
    train=True,
    transform=transforms.ToTensor(),
    download=True,
)
print(len(train_dataset) , 'length of the train dataset')

train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
test_dataset = datasets.FashionMNIST(
    root="dataset/",
    train=False,
    transform=transforms.ToTensor(),
    download=True,
)
print(len(test_dataset) , 'length of the test dataset')

test_loader = DataLoader(
    dataset=test_dataset, batch_size=batch_size, shuffle=True
)

from google.colab.patches import cv2_imshow
it = iter(train_loader)


images , labels = it.next()

plt.imshow(images[4][0])
print(labels)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
learning_rate = 0.001
num_epochs = 3
model = my_model()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)
print(model(torch.randn(64,1,28,28)).shape)

all_loss = []
for epoch in range(10):
    print(f"Epoch: {epoch}")
    for batch_idx, (data, targets) in enumerate(train_loader):
        data = data.to(device=device)
        targets = targets.to(device=device)
        scores = model(data) 
        loss = criterion(scores, targets)
        all_loss.append(loss)
        optimizer.zero_grad()   
        print(batch_idx,loss.item())
        loss.backward()
        optimizer.step()



def check_accuracy(loader, model):
    num_correct = 0
    num_samples = 0
    model.eval()

    with torch.no_grad():
        for x, y in loader:
            x = x.to(device=device)
            y = y.to(device=device)
#             x = x.reshape(x.shape[0], -1)

            scores = model(x)
            _, predictions = scores.max(1)
            num_correct += (predictions == y).sum()
            num_samples += predictions.size(0)

        print(
            f"Got {num_correct} / {num_samples} with accuracy"
            f" {float(num_correct) / float(num_samples) * 100:.2f}"
        )

    model.train()

check_accuracy(train_loader, model)
check_accuracy(test_loader, model)

